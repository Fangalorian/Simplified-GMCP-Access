{"type":"group","name":"simplified gmcp access","enabled":true,"id":1,"items":[{"type":"function","name":"onLoad","enabled":true,"id":2,"code":"// Place any code here you'd like to autorun when the system is loaded\n\n// Calls the SGMCP Modification Nexus function, activiting our modifications that make this package do stuff\nrun_function('SGMCP Modification', {}, 'Simplified gmcp access');\n","items":[]},{"type":"alias","name":"","enabled":true,"id":4,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"// Enter script here\n\n// This prints the keys of the GMCP object\nfor (let key in GMCP) \n    print(key, 'orange');\n\n// This prints the contents of the GMCP.gauge_data object\nprint(JSON.stringify(GMCP.gauge_data), 'yellow');\n"}],"text":"display gmcp","items":[]},{"type":"alias","name":"","enabled":true,"id":15,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"if","cond-type1":"value","cond-val1":"GMCP.TargetIsPlayer","cond-type2":"value","cond-val2":"true","cond-op":"eq","cond-mod":"","cond-cs":false,"dothen":"continue","doelse":"jump","dothenlabel":"","doelselabel":"Depression"},{"action":"notify","notice":"YAY, THIS WORKS!","notice_fg":"#ffff00","notice_bg":"#000000"},{"action":"stop"},{"action":"label","label":"Depression"},{"action":"notify","notice":"WHY ARE YOU SO BUGGY","notice_fg":"#ff0000","notice_bg":"#000000"},{"action":"variable","varname":"Testing","valtype":"value","value":"GMCP.gauge_data.hp","op":"set"},{"action":"notify","notice":"Health is: @Testing","notice_fg":"#ff8000","notice_bg":"#000000"}],"text":"sgmcp test","items":[]},{"type":"alias","name":"","enabled":true,"id":16,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"function","fn":"SGMCP Reset"},{"action":"notify","notice":" >> SGMCP Modifications RESET","notice_fg":"#ffff00","notice_bg":"#000000"}],"text":"reset sgmcp"},{"type":"alias","name":"","enabled":true,"id":19,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"function","fn":"SGMCP Modification"},{"action":"notify","notice":" >> SGMCP Modification ACTIVATED","notice_fg":"#ffff00","notice_bg":"#000000"}],"text":"load sgmcp"},{"type":"function","name":"SGMCP Reset","enabled":true,"id":17,"code":"/*\nThis Nexus function contains the original client implementation of the action_get_value function before we modified it using this package. \n\nCall this Nexus function using the 'reset sgmcp' alias if something is wrong with the modifications made in the SMGCP Modification Nexus function. Calling this Nexus function will reset the action_get_value function to restore balance to the world once more.\n*/\n\naction_get_value = function(a, typevar, namevar, actions)\n{\n    var type = a[typevar];\n    var text = a[namevar];\n\n    if (!type) type = 'value';\n    if (type == 'value') return text;\n    if (type == 'variable') {\n        // local variable from the matching?\n        // TODO: support matching variables, too!!!\n        // TODO: do local variables properly maybe.\n        if (text[0] == '@') text = text.substr(1);\n        if (actions.match.variables && actions.match.variables[text])\n            return actions.match.variables[text];\n        // Nope. Global variable then.\n        return client.get_variable(text);\n    }\n    if (type == 'target') return client.current_target();\n    if (type == 'capture') {\n        if (!actions) return null;\n        if ((!actions.match) || (!actions.match.backrefs)) return null;\n        var idx = parseInt(text);\n        if (isNaN(idx) || (idx < 0) || (idx >= actions.match.backrefs.length)) return null;\n        return actions.match.backrefs[idx];\n    }\n    return null;\n}"},{"type":"function","name":"SGMCP Modification","enabled":true,"id":18,"code":"\n\n// Re-writing the Nexus client action_get_value function that gets variables for simplified scripting\naction_get_value = function(a, typevar, namevar, actions)\n{\n    var type = a[typevar];\n    var text = a[namevar];\n\n    if (!type) type = 'value';\n    \n    // Modified section where input is defined as type 'value'\n    if (type == 'value') {\n        if (text.substr(0,4) == \"GMCP\") { // Check if the input is a GMCP object\n            sub_keys = text.split(\".\");   // Split on the '.' delimiter\n            if (sub_keys.length == 3) {\t  // Accepts GMCP objects of form GMCP.key.key\n                \n                // Set gmcp_data to the actual GMCP object data being referenced\n                let gmcp_data = client[sub_keys[0]][sub_keys[1]][sub_keys[2]];\n                \n                // Check to make sure the data being accessed exists\n                if (gmcp_data != undefined)\n                    // Return the accessed GMCP data as a string\n                \treturn gmcp_data.toString();\n            }\n            else if (sub_keys.length == 2) { // Accepts objects of form GMCP.key\n                \n                // Set gmcp_data to the actual GMCP object data being referenced\n                let gmcp_data = client[sub_keys[0]][sub_keys[1]];\n                \n                // Check to make sure the data being accessed exists\n                if (gmcp_data != undefined)\n                    // Return the accessed GMCP data as a string\n                \treturn gmcp_data.toString();\n            }\n        }\n        \n        // If the 'value' input is not a GMCP object, just go ahead and use that\n        return text;\n    }\n    if (type == 'variable') {\n        // local variable from the matching?\n        // TODO: support matching variables, too!!!\n        // TODO: do local variables properly maybe.\n        if (text[0] == '@') text = text.substr(1);\n        if (actions.match.variables && actions.match.variables[text])\n            return actions.match.variables[text];\n        // Nope. Global variable then.\n        return client.get_variable(text);\n    }\n    if (type == 'target') return client.current_target();\n    if (type == 'capture') {\n        if (!actions) return null;\n        if ((!actions.match) || (!actions.match.backrefs)) return null;\n        var idx = parseInt(text);\n        if (isNaN(idx) || (idx < 0) || (idx >= actions.match.backrefs.length)) return null;\n        return actions.match.backrefs[idx];\n    }\n    return null;\n}"}],"description":"Allows direct GMCP object access by simplified scripting"}